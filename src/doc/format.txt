b-tree file format:
+--------------------------------+
|          Header'               |
+--------------------------------+
|          Value                 |
+--------------------------------+
|          Index                 |
+--------------------------------+
|          Filter                |
+--------------------------------+
|          Header                |
+--------------------------------+
|          Value'                |
+--------------------------------+
|          Index'                |
+--------------------------------+
|          Filter'               |
+--------------------------------+
|          Header'               |
+--------------------------------+

simple block format:
    +----------------------------------+
    | MEATA Part1 | DATA | MEATA Part2 |
    +----------------------------------+

or:
         MEATA Part1
             /\
     +------+  +----------+
    /                      \
    +------------------------------------+
    | CRC32 | blktype | ... | DATA Part1 |
    |                                    |
    | DATA Part2       | blktype | CRC32 |
    +------------------------------------+
                       \                /
                        +-----+  +-----+
                               \/
                           MEATA Part2

Header block format(512B):
        extend for file head/tail block:
        |crc32(4B)|blk_type(1B)|magic(8B)|version(1B)
        |k_cnt(4B)|tree_heigh(1B)|compact_cnt(1B)
        |beg_ks(1B)|end_ks(1B)|beg_key|end_key
        |fend_off(v4B)|leaf_off(v4B)|node_cnt(v4B)|leaf_cnt(v4B)
        |filter_off(v4B)|filter_cnt(1B)
        |...|...
        |...|...
        |blk_type(1B)|crc32(4B)


Value block format: 32KB/block

 +----------------------------------------------------+
 | CRC32 | blktype |    v1          | blktype | CRC32 |
 +----------------------------------------------------+
 | CRC32 | blktype | v2 part1       | blktype | CRC32 |
 +----------------------------------------------------+
 | CRC32 | blktype | v2 part2       | blktype | CRC32 |
 +----------------------------------------------------+
 | CRC32 | blktype | v3 | v4 part1  | blktype | CRC32 |
 +----------------------------------------------------+
 | CRC32 | blktype | v4 part2 | v5  | blktype | CRC32 |
 +----------------------------------------------------+

Index block format:
L: leaf node (4KB)
I: internal node (4KB)
R: root node

                    +----------------------------------+
Leaf(level0)     => | L0 | L1 | L2 | L3 | L4 | L5 | L6 |
                    +----------------------------------+
Internal(level1) => | I0_0 | I0_1 | I0_2 | I0_3 | I0_4 |
                    +----------------------------------+
Internal(level2) => |     I1_0      |      I1_2        |
                    +----------------------------------+
Root             => |            Root                  |
                    +----------------------------------+

Leaf node item format: 
    ADD:
    |type(1B)|seq(8B)|val_crc16(2B)|valblk_off(4B)|val_off(2B)
    |share_ks(1B)|delt_ks(1B)|delt_key|vsize(vint)|

    DEL:
    |type(1B)|seq(8B)|share_ks(1B)|delt_ks(1B)|delt_key|

Interal node item format:
    |type(1B)|child_off(4B)|share_ks(1B)|delt_ks(1B)|delt_key|

Interal/Leaf node meta-part1 format:
    | CRC32(4B) | blktype(1B) | key_cnt(2B) | ... |

Bloom Filter format: 4KB/block

                    +-------------------------------------+
Filter Func1     => |            filter block1            |
                    +-------------------------------------+
Filter Func2     => |            filter block2            |
                    +-------------------------------------+
Filter Func3     => |            filter block3            |
                    +-------------------------------------+
Filter Func4     => |            filter block4            |
                    +-------------------------------------+



Binlog format:
    value will be saved as a single file if it's size is too big
    |crc32(4B)|bin_rec_size(4B)|seq(8B)|type(1B)|ks(1B)|key|vs(vint)|val|

